var links = require ('./searchlinks.js'),
    parsers = require('./searchparsers.js'),
    names = require('../base/names.js'),
    url = require('url'),
    request = require('request'),
    mlm = links.maslm;

mlm.setUrlBuilder(function() { return url.format(this.linkdata); });

function MusicApiSearchRequester(links, parsers, userAgent) {
    this.links = links;
    this.parsers = parsers;
    this.userAgent = userAgent;
    this.requests = {};
    this.requests[names.DEWIKINAME]=this.getRequest(names.DEWIKINAME);
    this.requests[names.ENWIKINAME]=this.getRequest(names.ENWIKINAME);
    this.requests[names.MBNAME]=this.getRequest(names.MBNAME);
    this.requests[names.DISCOGSDBNAME]=this.getRequest(names.DISCOGSDBNAME);
    this.requests[names.DISCOGSARTISTNAME]=this.getRequest(names.DISCOGSARTISTNAME);
}

MusicApiSearchRequester.prototype.setRequestsSearch = function(search) {
    this.requests[names.DEWIKINAME]=this.getRequest(names.DEWIKINAME, search);
    this.requests[names.ENWIKINAME]=this.getRequest(names.ENWIKINAME, search);
    this.requests[names.MBNAME]=this.getRequest(names.MBNAME, search);
    this.requests[names.DISCOGSDBNAME]=this.getRequest(names.DISCOGSDBNAME, search);
    this.requests[names.DISCOGSARTISTNAME]=this.getRequest(names.DISCOGSARTISTNAME, search);
}

MusicApiSearchRequester.prototype.getRequest = function(name, search) {
    var l = this.links.getLink(name),
        p = this.parsers.getParser(name);
    if(search) {
        l.setSearchValue(search);
    }
    return {
        "name": name,
        "parser": p,
        "roption": {
            "url": l.toUrl(),
            "headers": {
                "User-Agent": this.userAgent
            }
        },
        "makeRequest": function(cb) {            
            request(this.roption, function(e, resp, body) {
                if(e) cb(e, null);
                if(!e) p.parse(body, cb);
            });
        }
    };
}

module.exports.masr = new MusicApiSearchRequester(mlm, parsers.mlpc, 'HPVs Tutorials (hpv.leo.uberspace.de)');