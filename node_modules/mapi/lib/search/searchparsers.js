var names = require('../base/names.js'),
    parsers = require('../base/parsers.js');


var validateWikiSearchResult = parsers.createValidateSearchResultFunction(function(result) {
    return (result && result.query && result.query.search) ? true : false;
});

var validateMusicbrainzSearchResult = parsers.createValidateSearchResultFunction(function(result) {
    return (result && result.artist) ? true : false;
});

var validateDiscogsSearchResult1 = parsers.createValidateSearchResultFunction(function(result) {
    return (result && result.resp && result.resp.artist) ? true : false;
});

var validateDiscogsSearchResult2 = parsers.createValidateSearchResultFunction(function(result) {
    return (result && result.results) ? true : false;
});


var createWikiSearchResultEntry = parsers.createSearchResultEntryFunction(/(<([^>]+)>)/ig, {
    'titleProp': 'title',
    'idProp': 'title',
    'descriptionProp': 'snippet'
});

var createMusicbrainzSearchResultEntry = parsers.createSearchResultEntryFunction(null, {
    'titleProp': 'name',
    'idProp': 'id',
    'descriptionProp': 'name'
});

var createDiscogsSearchResult1Entry = parsers.createSearchResultEntryFunction(null, {
    'titleProp': 'name',
    'idProp': 'id',
    'descriptionProp': 'profile'
});

var createDiscogsSearchResult2Entry = parsers.createSearchResultEntryFunction(null, {
    'titleProp': 'title',
    'idProp': 'id',
    'descriptionProp': 'uri'
});

var wikiSearchResultIterator = parsers.createSearchResultIteratorFunction(function(data) {
    return (validateWikiSearchResult(data)) ? data.query.search : [];
});

var musicbrainzSearchResultIterator = parsers.createSearchResultIteratorFunction(function(data) {
    return (validateMusicbrainzSearchResult(data)) ? data.artist : [];
});

var discogsSearchResult1Iterator = parsers.createSearchResultIteratorFunction(function(data) {
    var res = [];
    if(validateDiscogsSearchResult1(data)) res.push(data.resp.artist);
    return res;
});

var discogsSearchResult2Iterator = parsers.createSearchResultIteratorFunction(function(data) {
    return (validateDiscogsSearchResult2(data)) ? data.results : [];
});


var wikiParser = parsers.createParser( validateWikiSearchResult, createWikiSearchResultEntry, wikiSearchResultIterator );
var musicbrainzParser = parsers.createParser( validateMusicbrainzSearchResult, createMusicbrainzSearchResultEntry, musicbrainzSearchResultIterator );
var discogs1Parser = parsers.createParser( validateDiscogsSearchResult1, createDiscogsSearchResult1Entry, discogsSearchResult1Iterator );
var discogs2Parser = parsers.createParser( validateDiscogsSearchResult2, createDiscogsSearchResult2Entry, discogsSearchResult2Iterator );

var mlpc = new parsers.ParserCollection();
mlpc.addParser(names.DEWIKINAME, wikiParser);
mlpc.addParser(names.ENWIKINAME, wikiParser);
mlpc.addParser(names.DISCOGSDBNAME, discogs2Parser);
mlpc.addParser(names.DISCOGSARTISTNAME, discogs1Parser);
mlpc.addParser(names.MBNAME, musicbrainzParser);

module.exports.mlpc = mlpc;