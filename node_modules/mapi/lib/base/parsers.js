var names = require('./names.js');

function getJSON(data) {
    var result = {}
    if(typeof data !== "string" && typeof data !== "object") return null;
    try {
        result = (typeof data ==="string") ? JSON.parse(data) : data;
        return result;
    }
    catch(e) {return null;}
}

function createValidateSearchResultFunction(spec) {
    return function(data) {
        var result = getJSON(data);
        return spec(data);
    }
}

function createSearchResultEntryFunction(removeRegex, props) {
    var r = removeRegex;
    return function(data) {
        return {
            "name": data[props.titleProp],
            "id": data[props.idProp],
            "description": (r) ? data[props.descriptionProp].replace(r,'') : data[props.descriptionProp]
        };
    };
}

function createSearchResultIteratorFunction(extractor) {
    return {
        create: function(data) {
            var a = extractor(data);
            return {
                arr: a,
                len: a.length,
                index: 0,
                hasNext: function() {
                    return this.len > this.index;
                    this.index += 1;
                },
                next: function() {
                    if(!this.hasNext()) return null;
                    var el = this.arr[this.index];
                    this.index += 1;
                    return el;
                }
           };
        }
    };
}


function JSONSearchResultParser( validator, createEntry, it ) {
    this.isValid = validator || function(data) { return true; };
    this.createEntry = createEntry;
    this.iterator = it;
    this.errorText = 'incorrect result';
}

JSONSearchResultParser.prototype.parse = function(data, cb, listener) {
    var entries = [],
        entry = {},
        c = cb || function(err, d) {},
        count=0,
        d = getJSON(data),
        iterator = this.iterator.create(d);
        
    if(this.isValid(d)) {        
        while(iterator.hasNext()) {
            entry = {};
            entry = this.createEntry(iterator.next());
            if(listener) listener(count, entry);
            entries.push(entry);
            count+=1;
        }
        c(null, entries);
    } else {
        c(this.errorText, null);
    } 
}

function createParser(validator, entryCreator, iterator) {
    return new JSONSearchResultParser(validator, entryCreator, iterator);
}

function ParserCollection() {
    this.parsers = {};
}

ParserCollection.prototype.addParser = function(name, parser) {
    this.parsers[name] = parser;
};

ParserCollection.prototype.getParser = function(name, parser) {
    return this.parsers[name];
};

ParserCollection.prototype.removeParser = function(name, parser) {
    delete this.parsers[name];
};


module.exports.createSearchResultIteratorFunction = createSearchResultIteratorFunction;
module.exports.createSearchResultEntryFunction = createSearchResultEntryFunction;
module.exports.createValidateSearchResultFunction = createValidateSearchResultFunction;
module.exports.createParser = createParser;
module.exports.ParserCollection = ParserCollection;