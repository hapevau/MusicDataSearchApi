
function ApiLink(opt, urlbuilder) {
    var options = opt || {};
    this.linkdata = options.linkdata || {};
    this.name = options.name || 'link';
    this.description = options.description || 'a link';
    this.urlbuilder = urlbuilder;
    this.searchParameter = options.searchParameter;
    this.searchRegex = options.searchRegex || /\{\{search\}\}/gi;
    this.searchIsParameter = options.searchIsParameter || true;
    this.originalpathname = this.linkdata.pathname;
}

ApiLink.prototype.toUrl = function() {
    return this.urlbuilder();
}

ApiLink.prototype.setSearchValue = function(search) {
    if(this.searchIsParameter && this.searchParameter) {
        this.linkdata.query[this.searchParameter] = search;
    } else {
        this.linkdata.pathname = this.originalpathname;
        this.linkdata.pathname = this.linkdata.pathname.replace(this.searchRegex, search);
    }
}

function ApiLinkManager(urlbuilder) {
    this.links = {};
    this.count = 0;
    this.urlbuilder = urlbuilder;
}

ApiLinkManager.prototype.setUrlBuilder = function(ub) {
    this.urlbuilder = ub;
}

ApiLinkManager.prototype.createLink = function(opts) {
    var options = opts,
        l = new ApiLink(options, this.urlbuilder);
    return l;
}

ApiLinkManager.prototype.addLink = function(link) {
    this.links[link.name] = link;
    this.count += 1;
}

ApiLinkManager.prototype.removeLink = function(name) {
    if(this.links[name]) {
        this.count -= 1; 
        delete this.links[name];
    }
}

ApiLinkManager.prototype.getLink = function(name) {
    return this.links[name];
};

ApiLinkManager.prototype.count = function() {
    return this.count;
};

ApiLinkManager.prototype.isLinkNameInUse = function(name) {
    return (this.links[name]) ? true : false;
};

ApiLinkManager.prototype.getLinkNamesAndDescriptions = function() {
    var arr = [];
    for (var key in this.links) {
        if (this.links.hasOwnProperty(key)) {
            arr.push({name: key, description: this.links[key].description});
        }
    }
    return arr;
}

ApiLinkManager.prototype.setSearchValue = function(s) {
    var arr = this.getLinkNamesAndDescriptions();
    for(var i = 0; i < this.count; i += 1) {
        this.links[arr[i].name].setSearchValue(s);
    }
}

ApiLinkManager.prototype.getUrls = function() {
    var arr = this.getLinkNamesAndDescriptions(),
        res = [];
    for(var i = 0; i < this.count; i += 1) {
        res.push(this.links[arr[i].name].toUrl());
    }
    return res;
}

module.exports.manager = ApiLinkManager;
